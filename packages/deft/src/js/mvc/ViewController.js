// Generated by CoffeeScript 1.6.3
/*
Copyright (c) 2012-2013 [DeftJS Framework Contributors](http://deftjs.org)
Open source under the [MIT License](http://en.wikipedia.org/wiki/MIT_License).
*/

/**
A lightweight MVC view controller. Full usage instructions in the [DeftJS documentation](https://github.com/deftjs/DeftJS/wiki/ViewController).

First, specify a ViewController to attach to a view:

    Ext.define("DeftQuickStart.view.MyTabPanel", {
      extend: "Ext.tab.Panel",
      controller: "DeftQuickStart.controller.MainController",
      ...
    });

Next, define the ViewController:

    Ext.define("DeftQuickStart.controller.MainController", {
      extend: "Deft.mvc.ViewController",

      init: function() {
        return this.callParent(arguments);
      }

    });

## Inject dependencies using the <u>[`inject` property](https://github.com/deftjs/DeftJS/wiki/Injecting-Dependencies)</u>:

    Ext.define("DeftQuickStart.controller.MainController", {
      extend: "Deft.mvc.ViewController",
      inject: ["companyStore"],

      config: {
        companyStore: null
      },

      init: function() {
        return this.callParent(arguments);
      }

    });

## Define <u>[references to view components](https://github.com/deftjs/DeftJS/wiki/Accessing-Views)</u> and <u>[add view listeners](https://github.com/deftjs/DeftJS/wiki/Handling-View-Events)</u> with the `control` property:

    Ext.define("DeftQuickStart.controller.MainController", {
      extend: "Deft.mvc.ViewController",

      control: {

        // Most common configuration, using an itemId and listener
        manufacturingFilter: {
          change: "onFilterChange"
        },

        // Reference only, with no listeners
        serviceIndustryFilter: true,

        // Configuration using selector, listeners, and event listener options
        salesFilter: {
          selector: "toolbar > checkbox",
          listeners: {
            change: {
              fn: "onFilterChange",
              buffer: 50,
              single: true
            }
          }
        }
      },

      init: function() {
        return this.callParent(arguments);
      }

      // Event handlers or other methods here...

    });

## Dynamically monitor view to attach listeners to added components with <u>[live selectors](https://github.com/deftjs/DeftJS/wiki/ViewController-Live-Selectors)</u>:

    control: {
      manufacturingFilter: {
        live: true,
        listeners: {
          change: "onFilterChange"
        }
      }
    };

## Observe events on injected objects with the <u>[`observe` property](https://github.com/deftjs/DeftJS/wiki/ViewController-Observe-Configuration)</u>:

    Ext.define("DeftQuickStart.controller.MainController", {
      extend: "Deft.mvc.ViewController",
      inject: ["companyStore"],

      config: {
        companyStore: null
      },

      observe: {
        // Observe companyStore for the update event
        companyStore: {
          update: "onCompanyStoreUpdateEvent"
        }
      },

      init: function() {
        return this.callParent(arguments);
      },

      onCompanyStoreUpdateEvent: function(store, model, operation, fieldNames) {
        // Do something when store fires update event
      }

    });
*/

Ext.define('Deft.mvc.ViewController', {
  alternateClassName: ['Deft.ViewController'],
  requires: ['Deft.core.Class', 'Deft.log.Logger', 'Deft.mvc.ComponentSelector', 'Deft.mvc.Observer'],
  config: {
    /**
    		* View controlled by this ViewController.
    */

    view: null
  },
  /**
  	* Observers automatically created and removed by this ViewController.
  */

  observe: {},
  /**
  	* Controls automatically created and removed by this ViewController.
  */

  control: {},
  constructor: function(config) {
    if (config == null) {
      config = {};
    }
    this.initConfig(config);
    this.registeredObservers = {};
    if (config.view) {
      this.controlView(config.view);
    }
    if (Ext.Object.getSize(this.observe) > 0) {
      this.createObservers();
    }
    return this;
  },
  /**
  	* @protected
  */

  controlView: function(view) {
    if (view instanceof Ext.ClassManager.get('Ext.Component')) {
      this.setView(view);
      this.registeredComponentReferences = {};
      this.registeredComponentSelectors = {};
      this.initComponentSelectors = {};
      this.observeComponentSelectors = {};
      this.initializeView();
    } else {
      Ext.Error.raise({
        msg: 'Error constructing ViewController: the configured \'view\' is not an Ext.Component.'
      });
    }
  },
  /**
  	* Initialize the ViewController
  */

  init: function() {},
  /**
  	* Destroy the ViewController
  */

  destroy: function() {
    var id, listener, selector, _ref;
    this.cleanupDefaultViewListeners();
    _ref = this.observeComponentSelectors;
    for (selector in _ref) {
      listener = _ref[selector];
      listener.destroy();
      delete this.observeComponentSelectors[selector];
    }
    for (id in this.registeredComponentReferences) {
      this.removeComponentReference(id);
    }
    for (selector in this.registeredComponentSelectors) {
      this.removeComponentSelector(selector);
    }
    this.removeObservers();
    return true;
  },
  /**
  	* @private
  */

  $control: (function() {
    var config;
    if (Ext.getVersion('extjs')) {
      return config = {
        view: {
          beforedestroy: {
            fn: "onViewBeforeDestroy"
          },
          afterrender: {
            single: true,
            fn: "onViewInitialize"
          }
        }
      };
    } else {
      return config = {
        view: {
          initialize: {
            single: true,
            fn: "onViewInitialize"
          }
        }
      };
    }
  })(),
  /**
  	* Sets up the default listeners for the controlled view.
  	* For ExtJS the listeners are for the beforedestroy and afterrender events
  	* For Sencha Touch initialize
  	* See $control above
  	* @private
  */

  setupDefaultViewListeners: function() {
    var componentSelector;
    componentSelector = Ext.create('Deft.mvc.ComponentSelector', {
      view: this.getView(),
      selector: null,
      listeners: this.$control.view,
      scope: this,
      live: true
    });
    this.initComponentSelectors[null] = componentSelector;
    if (!this.control.view) {
      this.control.view = {};
    }
  },
  /**
  	* @private
  */

  cleanupDefaultViewListeners: function() {
    this.initComponentSelectors[null].destroy();
    delete this.initComponentSelectors[null];
  },
  /**
  	* @private
  */

  onViewInitialize: function() {
    this.init();
  },
  /**
  	* @private
  */

  createViewObservers: function(view, eOpts) {
    view.$observers = {};
    return this.createObservers(eOpts.observe, view.$observers, view);
  },
  /**
  	* @private
  */

  removeViewObservers: function(view) {
    return this.removeObservers(view.$observers);
  },
  /**
  	* @private
  */

  addComponentObserver: function(selector, observe) {
    var componentSelector;
    if (Ext.getVersion('extjs')) {
      componentSelector = Ext.create('Deft.mvc.ComponentSelector', {
        view: this.getView(),
        selector: selector,
        listeners: {
          afterrender: {
            fn: 'createViewObservers',
            observe: observe
          },
          removed: {
            fn: 'removeViewObservers'
          }
        },
        scope: this,
        live: true
      });
    } else {
      componentSelector = Ext.create('Deft.mvc.ComponentSelector', {
        view: this.getView(),
        selector: selector,
        listeners: {
          initialize: {
            fn: 'createViewObservers',
            observe: observe
          },
          removed: {
            fn: 'removeViewObservers'
          }
        },
        scope: this,
        live: true
      });
    }
    return this.observeComponentSelectors[selector] = componentSelector;
  },
  /**
  	* @private
  */

  initializeView: function() {
    var config, element, elements, getterName, id, listeners, originalViewDestroyFunction, rendered, selector, self, _i, _len, _ref;
    rendered = this.getView().rendered || this.getView().initialized;
    this.setupDefaultViewListeners();
    _ref = this.control;
    for (id in _ref) {
      config = _ref[id];
      selector = null;
      if (id !== 'view') {
        if (Ext.isString(config)) {
          selector = config;
        } else if (config.selector != null) {
          selector = config.selector;
        } else {
          selector = '#' + id;
        }
      }
      listeners = null;
      if (Ext.isObject(config.listeners)) {
        listeners = config.listeners;
      } else {
        if (!((config.selector != null) || (config.live != null) || (config.observe != null))) {
          listeners = config;
        }
      }
      this.addComponentReference(id, selector);
      this.addComponentSelector(selector, listeners);
      if (Ext.isObject(config.observe)) {
        this.addComponentObserver(selector, config.observe);
      }
      if (rendered === true) {
        getterName = 'get' + Ext.String.capitalize(id);
        elements = this[getterName]();
        if (!Ext.isArray(elements)) {
          elements = [elements];
        }
        for (_i = 0, _len = elements.length; _i < _len; _i++) {
          element = elements[_i];
          if (element !== null) {
            Deft.LiveEventBus.register(element, selector);
          }
        }
      }
    }
    if (Ext.getVersion('extjs') != null) {
      if (this.getView().rendered) {
        this.onViewInitialize();
      }
    } else {
      self = this;
      originalViewDestroyFunction = this.getView().destroy;
      this.getView().destroy = function() {
        if (self.destroy() !== false) {
          return originalViewDestroyFunction.call(this);
        }
        return false;
      };
      if (this.getView().initialized) {
        this.onViewInitialize();
      }
    }
  },
  /**
  	* @private
  */

  onViewBeforeDestroy: function() {
    return this.destroy();
  },
  /**
  	* Add a component accessor method the ViewController for the specified view-relative selector.
  */

  addComponentReference: function(id, selector) {
    var getterName;
    if (this.registeredComponentReferences[id] != null) {
      Ext.Error.raise({
        msg: "Error adding component reference: an existing component reference was already registered as '" + id + "'."
      });
    }
    if (id !== 'view') {
      getterName = 'get' + Ext.String.capitalize(id);
      if (this[getterName] == null) {
        Deft.Logger.log("Adding '" + id + "' component reference for selector: '" + selector + "'.");
        this[getterName] = Ext.Function.pass(this.getViewComponent, [selector], this);
        this[getterName].generated = true;
        this.registeredComponentReferences[id] = true;
      }
    }
  },
  /**
  	* Remove a component accessor method the ViewController for the specified view-relative selector.
  */

  removeComponentReference: function(id) {
    var getterName;
    Deft.Logger.log("Removing '" + id + "' component reference.");
    if (this.registeredComponentReferences[id] == null) {
      Ext.Error.raise({
        msg: "Error removing component reference: no component reference is registered as '" + id + "'."
      });
    }
    if (id !== 'view') {
      getterName = 'get' + Ext.String.capitalize(id);
      if (this[getterName].generated) {
        this[getterName] = null;
      }
    }
    delete this.registeredComponentReferences[id];
  },
  /**
  	* Get the component(s) corresponding to the specified view-relative selector.
  */

  getViewComponent: function(selector) {
    var matches;
    if (selector != null) {
      matches = Ext.ComponentQuery.query(selector, this.getView());
      if (matches.length === 0) {
        return null;
      } else if (matches.length === 1) {
        return matches[0];
      } else {
        return matches;
      }
    } else {
      return this.getView();
    }
  },
  /**
  	* Add a component selector with the specified listeners for the specified view-relative selector.
  */

  addComponentSelector: function(selector, listeners) {
    var componentSelector, existingComponentSelector;
    Deft.Logger.log("Adding component selector for: '" + (selector || 'view') + "'.");
    existingComponentSelector = this.getComponentSelector(selector);
    if (existingComponentSelector != null) {
      Ext.Error.raise({
        msg: "Error adding component selector: an existing component selector was already registered for '" + selector + "'."
      });
    }
    componentSelector = Ext.create('Deft.mvc.ComponentSelector', {
      view: this.getView(),
      selector: selector,
      listeners: listeners,
      scope: this,
      live: true
    });
    this.registeredComponentSelectors[selector] = componentSelector;
  },
  /**
  	* Remove a component selector with the specified listeners for the specified view-relative selector.
  */

  removeComponentSelector: function(selector) {
    var existingComponentSelector;
    Deft.Logger.log("Removing component selector for '" + selector + "'.");
    existingComponentSelector = this.getComponentSelector(selector);
    if (existingComponentSelector == null) {
      Ext.Error.raise({
        msg: "Error removing component selector: no component selector registered for '" + selector + "'."
      });
    }
    existingComponentSelector.destroy();
    delete this.registeredComponentSelectors[selector];
  },
  /**
  	* Get the component selector corresponding to the specified view-relative selector.
  */

  getComponentSelector: function(selector) {
    return this.registeredComponentSelectors[selector];
  },
  /**
  	* @protected
  */

  createObservers: function(observe, observerContainer, host) {
    var events, target;
    if (observe == null) {
      observe = this.observe;
    }
    if (observerContainer == null) {
      observerContainer = this.registeredObservers;
    }
    if (host == null) {
      host = this;
    }
    for (target in observe) {
      events = observe[target];
      this.addObserver(target, events, observerContainer, host);
    }
  },
  addObserver: function(target, events, observerContainer, host) {
    var observer;
    if (observerContainer == null) {
      observerContainer = this.registeredObservers;
    }
    if (host == null) {
      host = this;
    }
    observer = Ext.create('Deft.mvc.Observer', {
      host: host,
      target: target,
      events: events,
      scope: this
    });
    return observerContainer[target] = observer;
  },
  /**
  	* @protected
  */

  removeObservers: function(observerContainer) {
    var observer, target;
    if (observerContainer == null) {
      observerContainer = this.registeredObservers;
    }
    for (target in observerContainer) {
      observer = observerContainer[target];
      observer.destroy();
      delete observerContainer[target];
    }
  }
}, function() {
  /**
  	* Preprocessor to handle merging of 'observe' objects on parent and child classes.
  */

  return Deft.Class.registerPreprocessor('observe', function(Class, data, hooks, callback) {
    Deft.Class.hookOnClassExtended(data, function(Class, data, hooks) {
      var _ref;
      if (Class.superclass && ((_ref = Class.superclass) != null ? _ref.observe : void 0) && Deft.Class.extendsClass(Class, 'Deft.mvc.ViewController')) {
        data.observe = Deft.mvc.Observer.mergeObserve(Class.superclass.observe, data.observe);
      }
    });
  }, 'before', 'extend');
});
