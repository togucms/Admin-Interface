// Generated by CoffeeScript 1.6.3
/*
Copyright (c) 2012-2013 [DeftJS Framework Contributors](http://deftjs.org)
Open source under the [MIT License](http://en.wikipedia.org/wiki/MIT_License).
*/

/**
* A mixin that creates and attaches the specified view controller(s) to the target view. Used in conjunction with Deft.mvc.ViewController.
* @deprecated 0.8 Deft.mixin.Controllable has been deprecated and can now be omitted - simply use the \'controller\' class annotation on its own.
*/

Ext.define('Deft.mixin.Controllable', {
  requires: ['Ext.Component', 'Deft.core.Class', 'Deft.log.Logger'],
  /**
  	@private
  */

  onClassMixedIn: function(targetClass) {
    Deft.Logger.deprecate('Deft.mixin.Controllable has been deprecated and can now be omitted - simply use the \'controller\' class annotation on its own.');
  }
}, function() {
  var callParentMethod, createControllerInterceptor, oldDerive;
  if (Ext.getVersion('extjs') && Ext.getVersion('core').isLessThan('4.1.0')) {
    callParentMethod = "callOverridden";
  } else {
    callParentMethod = "callParent";
  }
  createControllerInterceptor = function() {
    return function(config) {
      var className, controller, controllers, defaultController, error, _i, _len, _ref;
      if (config == null) {
        config = {};
      }
      if (!this instanceof Ext.ClassManager.get('Ext.Component') || this.$controlled) {
        return this[callParentMethod](arguments);
      }
      controllers = {};
      _ref = this.$controllers;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        className = _ref[_i];
        try {
          controller = Ext.create(className, config.controllerConfig || this.$controllerConfig[className]);
          controllers[className] = controller;
          controller.controlView(this);
        } catch (_error) {
          error = _error;
          Deft.Logger.warn("Error initializing view controller: an error occurred while creating an instance of the specified controller: '" + this.controller + "'.");
          throw error;
        }
      }
      defaultController = this.$controllers[0];
      if (this.getController === void 0) {
        this.getController = function(className) {
          if (className == null) {
            className = defaultController;
          }
          return controllers[className];
        };
      }
      this.$controlled = true;
      return this[callParentMethod](arguments);
    };
  };
  if (Ext.cmd) {
    oldDerive = Ext.cmd.derive;
    Ext.cmd.derive = function(className, base, data, enumerableMembers, xtypes, xtypesChain, xtypeMap, aliases, mixins, names, createdFn) {
      var oldCreated, oldExtended;
      if (!data.controller) {
        oldDerive.apply(this, arguments);
        return;
      }
      data.$controllers = [data.controller];
      data.$controllerConfig = {};
      data.$controllerConfig[data.controller] = data.controllerConfig || {};
      oldCreated = createdFn;
      createdFn = function(Class) {
        Class.override({
          constructor: createControllerInterceptor()
        });
        if (oldCreated) {
          return oldCreated.apply(this, arguments);
        }
      };
      oldExtended = data.onClassExtended;
      data.onClassExtended = function(Class, data, hooks) {
        Deft.Class.hookOnClassCreated(hooks, function(Class) {
          var controller, _i, _len, _ref;
          Class.override({
            constructor: createControllerInterceptor()
          });
          if (data.$controllers == null) {
            data.$controllers = [];
          }
          if (data.$controllerConfig == null) {
            data.$controllerConfig = {};
          }
          _ref = Class.superclass.$controllers || [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            controller = _ref[_i];
            data.$controllers.push(controller);
          }
          Ext.applyIf(data.$controllerConfig, Class.superclass.$controllerConfig);
        });
        if (oldExtended) {
          return oldExtended.apply(this, arguments);
        }
      };
      return oldDerive.apply(this, arguments);
    };
  }
  Deft.Class.registerPreprocessor('controller', function(Class, data, hooks, callback) {
    var self;
    data.$controllers = [data.controller];
    data.$controllerConfig = {};
    data.$controllerConfig[data.controller] = data.controllerConfig || {};
    Deft.Class.hookOnClassCreated(hooks, function(Class) {
      Class.override({
        constructor: createControllerInterceptor()
      });
    });
    Deft.Class.hookOnClassExtended(data, function(Class, data, hooks) {
      Deft.Class.hookOnClassCreated(hooks, function(Class) {
        var controller, _i, _len, _ref;
        Class.override({
          constructor: createControllerInterceptor()
        });
        if (data.$controllers == null) {
          data.$controllers = [];
        }
        if (data.$controllerConfig == null) {
          data.$controllerConfig = {};
        }
        _ref = Class.superclass.$controllers || [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          controller = _ref[_i];
          data.$controllers.push(controller);
        }
        Ext.applyIf(data.$controllerConfig, Class.superclass.$controllerConfig);
      });
    });
    self = this;
    Ext.require([data.controller], function() {
      if (callback != null) {
        callback.call(self, Class, data, hooks);
      }
    });
    return false;
  }, 'before', 'extend');
});
